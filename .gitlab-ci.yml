image: node:20.17.0

stages:
  - install
  - verify
  - deploy
  - e2e

variables:
  YARN_CACHE_FOLDER: '$CI_PROJECT_DIR/cache/yarn'

.rules:
  rules:
    - if: ($CI_PIPELINE_SOURCE == "merge_request_event")
    - if: ($CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "dev")

.cache_template: &cache_config
  key:
    files:
      - yarn.lock
  paths:
    - cache/yarn
    - node_modules
    - frontend/node_modules
    - backend/node_modules

install:
  stage: install
  interruptible: true
  image: node:alpine
  rules:
    - if: ($CI_PIPELINE_SOURCE == "merge_request_event")
      changes:
        - yarn.lock
    - if: ($CI_COMMIT_BRANCH == "main" && $CI_PIPELINE_SOURCE == "push")
      changes:
        - yarn.lock
    - if: $REINSTALL == "true"
  cache:
    <<: *cache_config
    policy: push
  script:
    - echo 'yarn-offline-mirror ".yarn-cache/"' >> .yarnrc
    - echo 'yarn-offline-mirror-pruning true' >> .yarnrc
    - yarn install --frozen-lockfile --ignore-engines
    

format:
  stage: verify
  interruptible: true
  image: node:alpine
  rules:
    - !reference [.rules, rules]
  cache:
    <<: *cache_config
    policy: pull
  script:
    - yarn install --frozen-lockfile --ignore-engines
    - yarn format:check

lint:
  stage: verify
  interruptible: true
  image: node:alpine
  rules:
    - !reference [.rules, rules]
  cache:
    <<: *cache_config
    policy: pull
  script:
    - yarn install --frozen-lockfile --ignore-engines
    - yarn lint
  needs:
    - format

test-frontend:
  stage: verify
  interruptible: true
  image: node:alpine
  rules:
    - !reference [.rules, rules]
  cache:
    <<: *cache_config
    policy: pull
  script:
    - yarn install --frozen-lockfile --ignore-engines
    - yarn frontend test
  needs:
    - lint

build-frontend:
  stage: verify
  interruptible: true
  image: node:alpine
  rules:
    - if: ($CI_PIPELINE_SOURCE == "merge_request_event")
    - if: ($CI_COMMIT_BRANCH == "main" && $CI_PIPELINE_SOURCE == "push")
  cache:
    <<: *cache_config
    policy: pull
  script:
    - yarn install --frozen-lockfile --ignore-engines
    - yarn frontend build
  needs:
    - test-frontend

build-backend:
  stage: verify
  interruptible: true
  image: node:alpine
  rules:
    - if: ($CI_PIPELINE_SOURCE == "merge_request_event")
    - if: ($CI_COMMIT_BRANCH == "main" && $CI_PIPELINE_SOURCE == "push")
  cache:
    <<: *cache_config
    policy: pull
  script:
    - yarn install --frozen-lockfile --ignore-engines
    - yarn backend build
  needs:
    - lint

pull-changes:
  stage: deploy
  interruptible: true
  image: alpine:latest
  before_script:
    - 'command -v ssh-agent >/dev/null || ( apk update && apk add openssh-client )'
    - eval $(ssh-agent -s)
    - chmod 400 "$SSH_PRIVATE_KEY"
    - ssh-add "$SSH_PRIVATE_KEY"
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
  script:
    - ssh -oStrictHostKeyChecking=no team03@vse.handson.pro "cd code/project && git pull"
  only:
    - main  # This will run only on the 'main' branch

e2e-testing:
  stage: e2e
  image: mcr.microsoft.com/playwright:v1.48.1-noble
  cache:
    <<: *cache_config
    policy: pull
  script:
    - echo FRONTEND_URL="$FRONTEND_URL" >> .env
    - echo BACKEND_URL="$BACKEND_URL" >> .env
    - yarn test:e2e
  only:
    - main
    
